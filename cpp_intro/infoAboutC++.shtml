<head>
<title>
C vs C++
</title>
<style type="text/css">
<!--
.style1 {font-family: "Courier New", Courier, monospace}
.style2 {font-family: "Courier New", Courier, monospace; font-style: italic; }
-->
</style>
<head>
<center>
<h1>Differences Between C and C++ </h1>
</center>

<!--
<h3>Announcements:</h3>
<ul>
  <li>See the Homework page for this week's homework (some reading).</li>
  <li>See the Labs page for the schedule for the remainder of the semester. Next Thursday there is no class/lab but there will be a homework. </li>
  </ul>
-->

<center>
<pre>
C makes it easy to shoot yourself in the foot; 
C++ makes it harder, but when you do, it blows away your whole leg. 
--Bjarne Stroustrup 
</pre>
</center>
<pre></pre>
<a href="index.shtml"> Back to Exercises</a>
<h4> Short History </h4>
<ul>
  <li> Designed by Bjarne Stroustrup in Bell Labs 
  <li> &#34C with Classes&#34 1980 (combines C with Simula classes) 
  <li> C++ name coined in 1983 
  <li> ISO C++ standard - 1998 
  <li> Today: widely used language 
    <ul>
        <li> operating systems
        <li> graphics
        <li> games
        <li> ...
    </ul>
   </li>
</ul>

<h4> Relation to C </h4>
  <li> C is a subset of C++
     <ul>
        <li> Most C programs are valid C++ programs (unless they use reserved C++ words)
	    <ul> C++...
	       <li> HAS CLASSES!	    
		   <li> Provides better guarantees than C (stronger type checking)
		   <li> Adds keywords <tt>new</tt> and <tt>delete</tt> to allocate and deallocate memory
		   <li> Introduces The Big Three: Destructor, Copy Constructor, and operator&#61
		   <li> Uses the .cpp extension rather than .c
		   <li> Is compiled with <tt>g++</tt> rather and <tt>gcc</tt>
		   <li> And Lots More!
        </ul>
    </ul>
     
<li>Visit this <a href="http://www.4p8.com/eric.brasseur/cppcen.html">C++ tutorial for C users</a> for more info</li>
</ul>

<h2> The Basics and I/O </h2>

<h4>Oh, Hello You! </h4>

<center>
<table width="600" border="1">
  <tr bgcolor="#CCCCCC"></tr>
    <tr bgcolor="#CCCCFF">
    <th width="300" scope="col">C</th>
    <th width="300" scope="col">C++</th>
  </tr>
  <tr>
    <td><div align="left"><pre>
    
    #include &#60stdio.h>
    
    
    int main () {
      char name[15];
      printf("What's your name?  ");
      scanf("%s", name);
      printf("Oh, Hello %s!\n", name);
      return 0;
    }
    </pre></div></td>
    <td><div align="left"><pre>
    #include &#60iostream>
    #include &#60string.h>
    using namespace std;

    int main() {
      string name;
      cout << "What's your name?  ";
      cin >> name;
      cout << "Oh, Hello " << name << "!" << endl;
      return 0;
    }
    </pre></div></td>
    <tr>
    <td><div align="center"><tt>gcc hello.c</tt></div></td>
    <td><div align="center"><tt>g++ hello.cpp</tt></div></td>
    </tr>
    <tr>
    <td><div align="left"><pre>
    
    What's your name?  C_Master
    Oh, Hello C_Master!
    </pre></div></td>
    <td><div align="left"><pre>
    
    What's your name?  C++_Master
    Oh, Hello C++_Master!
    </pre></div></td>
    </tr>

</table>
</center>

<h2> Classes </h2>

<li> A simple Integer Wrapper Class...

    <ul>
        <li>This example does not have "The Big Three". See <a href="DemoCode/IntCell.cpp">IntCell.cpp </a> for the full code</li>
    </ul>

<pre>
    class IntCell {
    public:
      explicit IntCell ( int initialValue = 0 ) { 
        storedValue = initialValue; 
      }
      
      int getValue() { 
        return storedValue; 
      }
    
      void setValue ( int val ) { 
        storedValue = val; 
      }
    
    private:
      int storedValue;
    }
</pre>

<li> The Big Three: Destructor, Copy Constructor, and operator&#61
    <ul>
        <li>Destructor
            <ul>
                <li> Called whenever an object goes out of scope or is subjected to a delete
                <li> Must free up any resources that were allocated during use of object
                <li> By default, calls destructor of each data member
            </ul>
<pre></pre>
        <li>Copy Constructor
            <ul>
                <li> Called with initializations
                    <ul>
                        <li><tt>IntCell copy = original</tt>
                        <li><tt>IntCell copy (original)</tt>
                    </ul>
                <li> Used when an object is passed using call-by-value
                <li> Used when an object is returned by value
                <li> By default, calls Copy Constructor of each data member
            </ul>
<pre></pre>
        <li>operator&#61
            <ul>
                <li> Called when &#61 is applied to two <em>already constructed</em> objects
                <li> By default, calls operator&#61 of each data member
            </ul>




<!--


<h3>Exercise 1 </h3>


<center>
<table width="500" border="1">
  <tr bgcolor="#CCCCCC">
    <th width="49" scope="col">&nbsp;</th>
    <th width="60" scope="col">&nbsp;</th>
    <th width="98" scope="col"><p><br />
    AND</p>
      </th>
    <th width="108" scope="col"><br />
      OR</th>
    <th width="151" scope="col"><br />
      EXCLUSIVE&nbsp;&nbsp; OR </th>
  </tr>
    <tr bgcolor="#CCCCFF">
    <th width="49" scope="col">A</th>
    <th width="60" scope="col">B</th>
    <th width="98" scope="col"><p>A &amp; B <br />
    </p>
      </th>
    <th width="108" scope="col">A | B<br /></th>
    <th width="151" scope="col">A ^ B</th>
  </tr>
  <tr>
    <td><div align="center">0</div></td>
    <td><div align="center">0</div></td>
    <td><div align="center">0</div></td>
    <td><div align="center">0</div></td>
    <td><div align="center">0</div></td>
  </tr>
  <tr>
    <td><div align="center">1</div></td>
    <td><div align="center">0</div></td>
    <td><div align="center">0</div></td>
    <td><div align="center">1</div></td>
    <td><div align="center">1</div></td>
  </tr>
  <tr>
    <td><div align="center">0</div></td>
    <td><div align="center">1</div></td>
    <td><div align="center">0</div></td>
    <td><div align="center">1</div></td>
    <td><div align="center">1</div></td>
  </tr>
  <tr>
    <td><div align="center">1</div></td>
    <td><div align="center">1</div></td>
    <td><div align="center">1</div></td>
    <td><div align="center">1</div></td>
    <td><div align="center">0</div></td>
  </tr>
</table>
</center>
<h3>Exercise 1 </h3>
Complete:
<pre>  
                     AND                        OR                  EXCLUSIVE OR  
					     
                   1 0 1 0                   1 0 1 0                   1 0 1 0
                 & 0 1 1 0                 | 0 1 1 0                 ^ 0 1 1 0
                 __________                __________                __________
                   0 0 1 0                    

</pre>
<h3>Common Uses of the &amp;, |, and ^ Operators  </h3>

A "mask" is often used to clear a bit or to turn it on or off. 
<br />
<center>
<table width="400" border="1">
  <tr bgcolor="#CCCCCC">
    <th width="203" scope="col">
      Sample Mask </th>
    <th width="127" scope="col">Binary Representation of Mask </th>
    </tr>
  <tr>
    <td><div align="center" class="style1">
      <div align="left">byte READY = 1; </div>
    </div></td>
    <td><div align="center" class="style1">00000001</div></td>
    </tr>
  <tr>
    <td><div align="center" class="style1">
      <div align="left">byte WAITING = 2; </div>
    </div></td>
    <td><div align="center"><span class="style1"><span class="style1"></span></span><span class="style1">00000010</span></div></td>
    </tr>
  <tr>
    <td><div align="center" class="style1">
      <div align="left">byte RUNNING = 4;</div>
    </div></td>
    <td><div align="center"><span class="style1"><span class="style1"></span></span><span class="style1">00000100</span></div></td>
    </tr>
  <tr>
    <td><div align="center" class="style2">etc.</div></td>
    <td>&nbsp;</td>
  </tr>
</table>
</center>
Let's say we have a variable called "status":
<pre>
     byte status;
     // initialize status to something
</pre>
<center>
<table width="700" border="1">
  <tr bgcolor="#CCCCCC">
    <th width="65" scope="col">Operator</th>
    <th width="100" scope="col">Common Usage      </th>
    <th width="183" scope="col">Example </th>
    <th width="324" scope="col">Action</th>
  </tr>
  <tr>
    <td><div align="center" class="style1">|</div></td>
    <td><div align="center">turn a bit on </div></td>
    <td>status = status | WAITING; </td>
    <td><div align="center">status' WAITING bit is turned on </div></td>
  </tr>
  <tr>
    <td><div align="center" class="style1">^</div></td>
    <td><div align="center">turn a bit off </div></td>
    <td>status = status ^ WAITING; </td>
    <td><div align="center">status' WAITING bit is turned off </div></td>
  </tr>
  <tr>
    <td><div align="center" class="style1">&amp;</div></td>
    <td><div align="center">clear bits </div></td>
    <td>status = status &amp; WAITING </td>
    <td><div align="center">clears all of status' non-WAITING bits; leaves WAITING bit unchanged </div></td>
  </tr>
</table>
</center>
<h3>Exercise 2 </h3>
Complete:
<center>
<table width="700" border="1">
  <tr bgcolor="#CCCCCC">
    <th width="62" scope="col">status<br />
      (decimal)</th>
    <th width="93" scope="col">status<br />
      (binary)</th>
    <th width="126" scope="col">status | WAITING<br />
      (binary)</th>
    <th width="150" scope="col">status ^ WAITING<br />
(binary)</th>
    <th width="235" scope="col">status &amp; WAITING<br />
(binary)</th>
  </tr>
  <tr>
    <td><div align="center" class="style1">12</div></td>
    <td><div align="center" class="style1">00001100</div></td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td><div align="center" class="style1">3</div></td>
    <td><div align="center" class="style1"></div></td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
</table>
</center>
<ul>
<li>Did the operator "|" succeed in turning a bit on?</li>

<li>Did the operator &quot;^&quot; succeed in turning a bit off?</li>
<li>Did the operator &quot;&amp;&quot; succeed in turning bits off?</li>
</ul>
<h3>Exercise 3 </h3>
Do Exercise 13-5 on page 471 of the book. You can ignore &quot;singleton module&quot; lingo - just create a program called encrypt.c that has the 2 functions. To simplify things, make the last parameter a char rather than a &quot;char *&quot;.
<h3>Exercise 4 </h3>
Read about the shift operators in the book on page 468 and experiment with them. Proove to yourself that << multiplies an integer by 2 and >> divides an integer by 2.
<hr />

!-->
</body>
</html>